openapi: 3.0.1
info:
  title: Car Hire API
  version: 0.1.0
  contact:
    name: Adam Alexandru
  description: Car Hire API
servers:
  - url: http://localhost:{port}
    description: local environment
    variables:
      port:
        default: '8080'
tags:
  - name: user
    description: User management

paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This operation can be done by the logged user.
      operationId: createUser
      requestBody:
        description: "Create user body"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUserDTO"
      responses:
        '201':
          $ref: '#/components/responses/ResourceCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      tags:
        - user
      summary: Get all users
      description: Return a list with all the users
      operationId: getAllUsers
      parameters:
        - in: query
          name: status
          required: false
          schema:
            $ref: "#/components/schemas/StatusEnum"
          description: status of the user account
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/UserDTO"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /user/{id}:
    get:
      tags:
        - user
      summary: Get user by ID
      description: Return the user found by ID
      operationId: getUserByID
      parameters:
        - in: "path"
          name: "id"
          description: User ID
          required: true
          schema:
            type: "string"
      responses:
        '200':
          description: Return user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      tags:
        - user
      summary: Update user details
      description: Update user details with new information
      operationId: updateUserDetails
      parameters:
        - in: "path"
          name: "id"
          description: User ID
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Update user body"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchBody"
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - user
      summary: Delete user
      description: Delete user account
      operationId: deleteUser
      parameters:
        - in: "path"
          name: "id"
          required: true
          schema:
            type: "string"
          description: User ID
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  responses:
    ResourceCreated:
      description: success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceCreatedDTO'
    Success:
      description: success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseDTO'
    Unauthorized:
      description: unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
    NotFound:
      description: not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
    BadRequest:
      description: bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
    ServerError:
      description: internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorDTO'
  schemas:
    OpEnum:
      type: string
      description: Operation available for object
      enum:
        - ADD
        - REMOVE
        - REPLACE
    PatchBody:
      type: array
      items:
        $ref: '#/components/schemas/PatchDocument'
    PatchDocument:
      type: object
      description: HTTP JSONPatch document from RFC 6902
      properties:
        op:
          $ref: "#/components/schemas/OpEnum"
        path:
          type: string
          description: JSON Pointer
          example: "a/b/c"
        value:
          type: string
          description: JSON pointer value
          example: "newValue"
      required:
        - op
        - path
        - value

    StatusEnum:
      type: string
      enum:
        - Active
        - Deleted

    CarClassEnum:
      type: string
      enum:
        - Coupe
        - Hatchback
        - Limousine
        - Sedan
        - Minivan
        - Suv

    NewUserDTO:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: "password"
        firstname:
          type: string
        lastname:
          type: string
        countryOfResidence:
          type: string
          example: "ID of country"
        driverLicense:
          type: string
    UserDTO:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        countryOfResidence:
          type: string
        driverLicense:
          type: string
        status:
          $ref: "#/components/schemas/StatusEnum"
    ResourceCreatedDTO:
      type: object
      properties:
        id:
          type: string
          description: ID of the created resource
    ErrorDTO:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: error message
    ResponseDTO:
      type: object
      properties:
        message:
          type: string
          example: Sample message
          description: Custom message